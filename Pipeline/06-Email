node {

notify('Initiating Job')
    
try {

// Get Artifactory Server Instace Details
def server = Artifactory.server "01"
def buildInfo =  Artifactory.newBuildInfo()

// Project Path 
def project_path = "04-App-Code/petclinic-code"

// Project Repo
def project_repo = "https://github.com/amitvashisttech/devops-m-benz-27-Jan-2022.git"

// Project Branch 
def project_branch = "main"



stage('Git - Test - CheckOut') {
  git branch: project_branch, url: project_repo
} 

dir(project_path) {

stage('Maven Clean') {
  sh 'mvn clean'
}

stage('Maven Compile') {
  sh 'mvn compile'
} 

stage('Maven Test') {
  sh 'mvn test'
}

stage('Maven Package') {
  sh 'mvn package'
}


stage('Build Management') {
		def uploadSpec = """{ 
			"files": [
			{
			"pattern": "**/*.war",
			"target": "petclinic-snapshot"
			}
		]

	}"""
	
	server.upload spec: uploadSpec
}

stage('Publish Build Info'){
   server.publishBuildInfo buildInfo
}




stage('Archive Artifacts') {
  archiveArtifacts artifacts: 'target/petclinic.war', followSymlinks: false
}


stage('Docker Deployment') {
  sh 'docker-compose up -d --build'
}

}

	notify('Job has been Completed - Successful')
    }	catch (err) { 
        notify ("Error ${err}")
        currentBuild.result = 'FAILURE'
    }

}

    



def notify(status){
    emailext (
      to: "pastmaster@myjenkins.com",
      subject: "${status}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
      body: """<p>${status}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>
        <p>Check console output at <a href='${env.BUILD_URL}'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a></p>""",
    )
}


